Description: >
  udacity cloud ops project
  by mayue
  
Parameters:

  VPCCidr:
    Description: ip range for scaling group
    Type: String
    Default: 10.0.0.0/16
    
  PublicSubnetIpBlocks:
    Description: ip range for public subnets
    Type: List<String>
    Default: "10.0.0.0/24, 10.0.1.0/24"
    
  PrivateSubnetIpBlocks:
    Description: ip range for private subnets
    Type: List<String>
    Default: "10.0.128.0/24, 10.0.129.0/24"
    
  Zones:
    Description: zones
    Type: List<String>
    Default: "us-west-2a, us-west-2b"
    
  Maxsize:
    Description: max size of vms in auto scaling group
    Type: String
    Default: 1
    
  MinSize:
    Description: min size of vms in auto scaling group
    Type: String
    Default: 1
    
  ImageId:
    Description: image
    Type: String
    Default: "ami-0d1cd67c26f5fca19"
    
  InstanceType:
    Description: image
    Type: String
    Default: "t2.micro"
    
  KeyName:
    Description: ec2 ssh key-pair name
    Type: String
    Default: udacity_project_cloudformation
      
Resources:

#########################################
#  vpc
#########################################

  VPC001:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      
  PublicNetwork001:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC001
      CidrBlock:
        !Select [0, !Ref PublicSubnetIpBlocks]
      AvailabilityZone:
        !Select [0, !Ref Zones]
        
  PublicNetwork002:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC001
      CidrBlock: 
        !Select [1, !Ref PublicSubnetIpBlocks]
      AvailabilityZone:
        !Select [1, !Ref Zones]
        
  PrivateNetwork001:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC001
      CidrBlock:
        !Select [0, !Ref PrivateSubnetIpBlocks]
      AvailabilityZone:
        !Select [0, !Ref Zones]
        
  PrivateNetwork002:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC001
      CidrBlock: 
        !Select [1, !Ref PrivateSubnetIpBlocks]
      AvailabilityZone:
        !Select [1, !Ref Zones]


#########################################
#  Internet gateway
#########################################       

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: test
        
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC001
      InternetGatewayId: !Ref InternetGateway
      
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC001

  PublicInternetRouteTableEntry:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'

  RouteTableAssociationAPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicNetwork001
      RouteTableId: !Ref PublicRouteTable

  RouteTableAssociationBPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicNetwork002
      RouteTableId: !Ref PublicRouteTable
 

#########################################
#  NAT
#########################################       

  NATEIP001:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway001:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NATEIP001.AllocationId'
      SubnetId: !Ref PublicNetwork001

  NATEIP002:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway002:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NATEIP002.AllocationId'
      SubnetId: !Ref PublicNetwork002

  NatRouteTable001:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC001

  NatRouteTableEntry00101:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway001
      RouteTableId: !Ref NatRouteTable001
      DestinationCidrBlock: '0.0.0.0/0'

  NatRouteTable002:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC001

  NatRouteTableEntry00201:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway002
      RouteTableId: !Ref NatRouteTable002
      DestinationCidrBlock: '0.0.0.0/0'

  RouteTableAssociationNat001:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateNetwork001
      RouteTableId: !Ref NatRouteTable001

  RouteTableAssociationNat002:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateNetwork002
      RouteTableId: !Ref NatRouteTable002
      
      
#########################################
#  security group
#########################################

  WebSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: open 80 & 22
      GroupName: WebSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref VPCCidr
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VPCCidr
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref VPCCidr
      VpcId:
        Ref: VPC001
        
#########################################
# instances
#########################################

  WebLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      BlockDeviceMappings: 
        - DeviceName: /dev/sda1
          Ebs: 
            VolumeSize: 10
            DeleteOnTermination: true
      IamInstanceProfile: 
        !Ref ProfileWithRolesForOurApp
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      #KeyName: !Ref KeyName
      PlacementTenancy: "default"
      SecurityGroups: 
        - !Ref WebSG
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install unzip awscli -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            aws s3 cp s3://udacity-demo-1/udacity.zip .
            unzip -o udacity.zip

  Web1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      LaunchConfigurationName:
        !Ref WebLaunchConfiguration
      MaxSize: !Ref Maxsize
      MinSize: !Ref MinSize
      VPCZoneIdentifier: 
        - !Ref PrivateNetwork001
        - !Ref PrivateNetwork002
      TargetGroupARNs:
        - !Ref WebAppTargetGroup
    DependsOn: WebLaunchConfiguration
  
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - UdacityS3ReadOnlyEC2


#########################################
# bastion
#########################################

  BastionSecureGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC001
      GroupDescription: Enable ssh access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
          
  BastionEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      
  BastionEIPAssociation:   
    Type: AWS::EC2::EIPAssociation
    Properties: 
      EIP: !Ref BastionEIP
      InstanceId: !Ref BastionInstance
      
  BastionInstance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref BastionSecureGroup
      SubnetId:
        !Ref PublicNetwork001
      
      
#########################################
# load balancer
#########################################

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC001
      GroupDescription: Enable HTTP/HTTPS access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebAppALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets:
        - !Ref PublicNetwork001
        - !Ref PublicNetwork002
      Type: application
  
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: 
            !Ref WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppALB
      Port: 80
      Protocol: HTTP

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC001
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      
      
#########################################
# outputs
#########################################
 
Outputs: 

  Region:
    Description: "region"
    Value:
      Ref: "AWS::Region"
    Export:
      Name: region
      
  AvailabilityZones:
    Description: AvailabilityZones
    Value:
      !Join 
        - ","
        - Fn::GetAZs: 
            Ref: "AWS::Region"
    Export:
      Name: AvailabilityZones
     

  BastionIP:
    Description: BastionIP
    Value:
      !Ref BastionEIP
    Export:
      Name: BastionIP  
      
  LBDNSName:
    Description: Web App ELB DNSName 
    Value:
      Fn::Join:
        - ""
        - - "http://"
          - Fn::GetAtt: WebAppALB.DNSName  
  